[
{
	"uri": "/",
	"title": "AWS Backup anomaly detection for Amazon EBS volumes",
	"tags": [],
	"description": "",
	"content": "AWS Backup anomaly detection for Amazon EBS volumes Protecting your data from cyberattacks and ransomware is a critical responsibility, and taking the necessary steps to detect anomalous activity at every level within your organization can help you keep your data as safe as possible. Data storage is an important area where you can and should deploy anomaly detection.\nTo protect your storage, in this post I build a simple serverless pipeline to detect anomalies occurring on Amazon Elastic Block Store (EBS) volumes. I use AWS Backup along with several other AWS managed services to build the solution.\nSolution architecture At the start of the solution is AWS Backup. When an Amazon EBS volume is backed up, a snapshot is created. By comparing this current snapshot to a previously created snapshot, the number of changed blocks between the two can easily be determined. This changed-blocks value is published to Amazon CloudWatch as a custom metric, where an Amazon CloudWatch alarm is configured to detect anomalies on the metric. By using the powerful built-in machine learning capabilities of Amazon CloudWatch, anomalies are detected and surfaced when the alarm’s threshold band is breached. When this happens, any pre-configured alarm notifications are triggered.\nTo build the anomaly-detection pipeline, I use the following services:\n AWS Backup: We’ll use AWS Backup to manage backups of Amazon EBS volumes. For this post, we’ll create a backup plan which selects EBS volumes based on a tag key you provide during setup. Once a backup starts, a snapshot is created and events from the AWS Backup process are published to Amazon EventBridge. Amazon EventBridge: Amazon EventBridge is a serverless event bus, and it receives incoming events published from AWS Backup. For backup events that match a preconfigured rule that we create, EventBridge will trigger an AWS Lambda function. AWS Lambda: All AWS Backup events that match the Amazon EventBridge rule are passed to an AWS Lambda From the event, the AWS Lambda function extracts the Amazon EBS volume Amazon Resource Name (ARN) and the current snapshot name. Using the ARN as a key, the previous backup snapshot details are retrieved from an Amazon DynamoDB table. If a previous snapshot item is found for the given ARN, the current and previous snapshots are compared for change. The calculated change value is passed along to Amazon CloudWatch as a custom metric. If a previous snapshot item was not found in the Amazon DynamoDB table, a new item is created, and an Amazon CloudWatch alarm is configured for the ARN. Amazon DynamoDB: For each backup event arriving at the AWS Lambda function, an Amazon DynamoDB table is used to persist details about the event. The ARN from the event is used as the partition key, and the snapshot name is attached as an attribute to the item. Amazon CloudWatch: A custom metric is created in the AWS Lambda function and is sent to Amazon CloudWatch. The metric value contains the number of changed blocks between the current snapshot and the previous. A CloudWatch alarm, that was previously configured and created in the AWS Lambda function, is triggered when the anomaly-detection threshold band is breached. Amazon Simple Notification Service (Amazon SNS): When a CloudWatch alarm is triggered, an Amazon SNS topic delivers a notification to the email address configured during setup. The following diagram illustrates the architecture of the solution:  Content  Introduction Preparation Resource Check Create backup Monitoring Resource Cleanup  "
},
{
	"uri": "/2-prerequiste/2.1-creates3bucket/",
	"title": "Create S3 bucket",
	"tags": [],
	"description": "",
	"content": "Create S3 bucket Download the source at here\n  Access to S3 interface\n Select Buckets Select Create bucket    In the Create bucket interface  Select Create bucket  Select Upload  We will upload the file anomaly-detection-lambda.zip. Select Upload  Complete upload  "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction Protecting your data from cyberattacks and ransomware is a critical responsibility, and taking the necessary steps to detect anomalous activity at every level within your organization can help you keep your data as safe as possible. Data storage is an important area where you can and should deploy anomaly detection.\nTo protect your storage, in this post I build a simple serverless pipeline to detect anomalies occurring on Amazon Elastic Block Store (EBS) volumes. I use AWS Backup along with several other AWS managed services to build the solution.\nSolution architecture At the start of the solution is AWS Backup. When an Amazon EBS volume is backed up, a snapshot is created. By comparing this current snapshot to a previously created snapshot, the number of changed blocks between the two can easily be determined. This changed-blocks value is published to Amazon CloudWatch as a custom metric, where an Amazon CloudWatch alarm is configured to detect anomalies on the metric. By using the powerful built-in machine learning capabilities of Amazon CloudWatch, anomalies are detected and surfaced when the alarm’s threshold band is breached. When this happens, any pre-configured alarm notifications are triggered.\nTo build the anomaly-detection pipeline, I use the following services:\n AWS Backup: We’ll use AWS Backup to manage backups of Amazon EBS volumes. For this post, we’ll create a backup plan which selects EBS volumes based on a tag key you provide during setup. Once a backup starts, a snapshot is created and events from the AWS Backup process are published to Amazon EventBridge. Amazon EventBridge: Amazon EventBridge is a serverless event bus, and it receives incoming events published from AWS Backup. For backup events that match a preconfigured rule that we create, EventBridge will trigger an AWS Lambda function. AWS Lambda: All AWS Backup events that match the Amazon EventBridge rule are passed to an AWS Lambda From the event, the AWS Lambda function extracts the Amazon EBS volume Amazon Resource Name (ARN) and the current snapshot name. Using the ARN as a key, the previous backup snapshot details are retrieved from an Amazon DynamoDB table. If a previous snapshot item is found for the given ARN, the current and previous snapshots are compared for change. The calculated change value is passed along to Amazon CloudWatch as a custom metric. If a previous snapshot item was not found in the Amazon DynamoDB table, a new item is created, and an Amazon CloudWatch alarm is configured for the ARN. Amazon DynamoDB: For each backup event arriving at the AWS Lambda function, an Amazon DynamoDB table is used to persist details about the event. The ARN from the event is used as the partition key, and the snapshot name is attached as an attribute to the item. Amazon CloudWatch: A custom metric is created in the AWS Lambda function and is sent to Amazon CloudWatch. The metric value contains the number of changed blocks between the current snapshot and the previous. A CloudWatch alarm, that was previously configured and created in the AWS Lambda function, is triggered when the anomaly-detection threshold band is breached. Amazon Simple Notification Service (Amazon SNS): When a CloudWatch alarm is triggered, an Amazon SNS topic delivers a notification to the email address configured during setup. The following diagram illustrates the architecture of the solution:  "
},
{
	"uri": "/2-prerequiste/2.2-createebs/",
	"title": "Create EBS",
	"tags": [],
	"description": "",
	"content": "Create EBS   Execute EBS generation\n Access to EC2 interface Select Volume Select Create volume     Perform EBS Configuration\n  Perform tagging with Key as AnomalyDetection. Then select Create volume.  Create EBS successfully.  Check tags.  "
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "Preparation  Create S3 bucket Create EBS volume Create CloudFormation Stack  "
},
{
	"uri": "/3-checkresource/",
	"title": "Check created resource",
	"tags": [],
	"description": "",
	"content": "Check created resource  Check Backup vaults created from CloudFormation  Check Backup plan. Select the backup plan created from CloudFormation.  View details Backup rules and Resource assignments  Check Backup plab tags   Access the Amazon EventBridge interface\n Select Rules View the created rule.    Check Event pattern  Check Target  Test Lambda function  "
},
{
	"uri": "/2-prerequiste/2.3-createstack/",
	"title": "Creating resources with CloudFormation",
	"tags": [],
	"description": "",
	"content": "Create resources with CloudFormation  Perform resource creation with CloudFormation. Select Create stack.   Configure Create stack\n Select Template is ready Select Upload a template file Upload file anomaly-detection-cfn.json Select Next     Enter Stack name as AnomalyDetectionStack\n Complete the information, enter email to receive notifications. Enter EBS\u0026rsquo;s TagKey. Enter the created S3 bucket name. Select Next    Select Next  Select I acknowledge that AWS CloudFormation might create IAM resources. Then select Submit.  Wait about 5 minutes, stack created successfully.  Check the entered email will receive a notification.   Note that the mail may be sent to the spam folder. Select Confirm subscription  After Subscription confirmed!  "
},
{
	"uri": "/5-monitoring/",
	"title": "Create backup",
	"tags": [],
	"description": "",
	"content": "Create backup   In this section, we will create On-demand backup.\n Access to AWS Backup interface Select Create on-demand backup     Complete information to create backup\n For Resource type, select EBS Select the created Volume ID. Then select Backup window as Create backup now (Starts after 1 hour of creation) Select Always for Retention period Select the created Backup vault. Use default IAM role. Select Create on-demand backup    You will see that the backup job is in Running status  View backup job details.  About 5 minutes later, the backup job will complete.  "
},
{
	"uri": "/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources  Clear stack CloudFormation  Go to CloudFormation page Select the stack to delete Select Delete Confirm delete Wait about 5 minutes to delete the stack successfully.    "
},
{
	"uri": "/4-createbackup/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]